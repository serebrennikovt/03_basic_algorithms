# Квадратичные сортировки O(N ** 2) - количество операций, требуемых на обработку массива.,
# где N - длина массива.

from random import randint

# Создание списков А, B, C  для сортировок:
N = 10  # Длина нового списка.
A = [randint(-20, 100) for _ in range(N)]  # Заполняем список А случайными числами.
B = [randint(-20, 100) for _ in range(N)]  # Заполняем список B случайными числами.
C = [randint(-20, 100) for _ in range(N)]  # Заполняем список C случайными числами.


# 1 Сортировка списка А 'Вставками' по возрастанию:

def insert_sort(A):
    ''' Сортировка списка А 'Вставками' по возрастанию '''
    operations_insert_sort = 0
    print(A, 'Список A до сортировки.')
    for top in range(1, N):  # Вставляемый элемент
        k = top  # Копируем значение индекса вставляемого элемента во временную переменную.
        while k > 0 and A[k - 1] > A[k]:
            # Пока вставляемый элемент не на позиции [0] и предыдущий элемент больше вставляемого.
            A[k], A[k - 1] = A[k - 1], A[k]  # Сдвиг элемента влево, с обменом переменных.
            k -= 1
            operations_insert_sort += 1
    print(A, 'Cписок A после сортировки.')
    print('Количество операций на обработку:', operations_insert_sort)
    print()


# 2 Сортировка списка B методом 'Выбора' по возрастанию:

def choise_sort(B):
    '''Сортировка списка А методом 'Выбора' по возрастанию'''
    operations_choise_sort = 0
    print(B, 'Список B до сортировки.')
    for pos in range(0, N - 1):
        # Позиция для вставки минимального элемента.(Последний элемент сортируется автоматически)
        for k in range(pos + 1, N):  # Элементы, стоящие 'правее' отсортированной части.
            if B[k] < B[pos]:
                B[k], B[pos] = B[pos], B[k]
                operations_choise_sort += 1
    print(B, 'Список B после сортировки.')
    print('Количество операций на обработку:', operations_choise_sort)
    print()


# 3 Сортировка списка C методом 'Пузырька' по возрастанию:

def bubble_sort(C):
    '''Сортировка списка А методом 'Пузырька' по возрастанию'''
    operations_bubble_sort = 0
    print(C, 'Список C до сортировки.')
    for bypass in range(1, N):  # Количество проходов
        for k in range(0, bypass):
            if C[k] > C[k + 1]:
                C[k], C[k + 1] = C[k + 1], C[k]  # Обмен неотсортированных переменных.
                operations_bubble_sort += 1
    print(C, 'Список C после сортировки.')
    print('Количество операций на обработку:', operations_bubble_sort)
    print()


insert_sort(A)
choise_sort(B)
bubble_sort(C)
